
/*   2Dpoly PDF wrapper  */

#ifndef PDFKKP2DPOLYDALITZ
#define PDFKKP2DPOLYDALITZ
#include "BToDKTo3piK/BdkPdfDalitzBase.hh"
#include "BToDKTo3piK/BdkDalitzEff.hh"

class RooAbsReal;
class RooRealVar;


class PdfKKP2DpolyDalitz : public BdkPdfDalitzBase {
public:
  PdfKKP2DpolyDalitz();

  PdfKKP2DpolyDalitz(const char * theName, const char * theDesc, 
		     RooAbsReal &m12, RooAbsReal &m13,
		     BdkDalitzBase::Flavor flavor = BdkDalitzBase::D0,
		     RooRealVar* c[10] = 0);
  
  virtual ~PdfKKP2DpolyDalitz();
  
  virtual void init(const char * theName, const char * theDesc,
		    RooAbsReal &m12, RooAbsReal &m13, 
		    BdkDalitzBase::Flavor flavor = BdkDalitzBase::D0) {
    init(theName, theDesc, m12, m13, flavor, 0);
  }

  virtual void init(const char * theName, const char * theDesc,
		    RooAbsReal &m12, RooAbsReal &m13, 
		    BdkDalitzBase::Flavor flavor,
		    RooRealVar* c[10]);

  // accessors:
  RooRealVar* c(int n) { return (n<=9 ? _c[n] : 0); }
  RooRealVar* s(int n) { return ((n>0)&&(n<=5) ? _c[n] : 0); }
  RooRealVar* a(int n) { return ((n>0)&&(n<=4) ? _c[n+5] : 0); }

  const RooRealVar* c(int n) const { return (n<=9 ? _c[n] : 0); }
  const RooRealVar* s(int n) const { return ((n>0)&&(n<=5) ? _c[n] : 0); }
  const RooRealVar* a(int n) const { return ((n>0)&&(n<=4) ? _c[n+5] : 0); }

protected:
  // Helpers:
  virtual void createPdf();    
  
private:
  // Data:
  RooRealVar* _c[10];

  ClassDef (PdfKKP2DpolyDalitz,0)
    
};

#endif














